int setor_em_bytes    = 256;
int setores_no_bloco  = 1;
int bytes_bloco       = setor_em_bytes    * setores_no_bloco;
int limite_caso_1     = bytes_bloco       * 2;
int bytes_ind_simples = (bytes_bloco/4)   * bytes_bloco;
int limite_caso_2     = bytes_ind_simples + limite_caso_1;
int bytes_ind_dupla   = bytes_ind_simples ^ 2;
int limite_caso_3     = bytes_ind_dupla   + limite_caso_1;


int posicao_atual;
int bytes_lidos;
int bytes_a_serem_lidos;

void ler_setor_para_buffer(unsigned char* buffer, int numero_setor, int bytes_a_serem_lidos, int* bytes_lidos, int deslocamento){
  unsigned char* setor;
  read_sector(setor, numero_setor);
  int contador_bytes = deslocamento;

  while(contador_bytes < setor_em_bytes && *bytes_lidos < bytes_a_serem_lidos){
    buffer[*bytes_lidos] = setor[contador_bytes];
    contador_bytes++;
    *bytes_lidos++;
  }
}

void leitura_direta_bloco(unsigned char* buffer, int setor_inicio_bloco, int bytes_a_serem_lidos, int* bytes_lidos){
  int deslocamento_bytes     = (posicao_atual + *bytes_lidos) % setor_em_bytes;
  int deslocamento_setores   = (posicao_atual + *bytes_lidos) / setor_em_bytes;
  int setor_a_ser_lido       = setor_inicio_bloco + deslocamento_setores;
  int byte_relativo_ao_bloco = deslocamento_bytes + deslocamento_setores* setor_em_bytes;

  while(*bytes_lidos < bytes_a_serem_lidos && byte_relativo_ao_bloco < bytes_bloco){
    ler_setor_para_buffer(buffer, setor_a_ser_lido, bytes_a_serem_lidos, bytes_lidos, deslocamento_bytes);
    deslocamento_bytes = 0;
    setor_a_ser_lido++;
    byte_relativo_ao_bloco++;
  }
}



void leitura_indireta_simples(unsigned char* buffer){

}
void leitura_indireta_dupla(unsigned char* buffer){

}

int leitura_arquivo(unsigned char* buffer){
  contador = 0;
  if(ponteiro<0)
    return ERRO;
  if(posicao_atual < limite_caso_1):
      leitura_direta();
  else if(posicao_atual < limite_caso_2):
      leitura_indireta_simples();
  else if(posicao_atual < limite_caso_3):
    leitura_indireta_dupla();
  else
    return ERRO;
    posicao_atual += contador;

}


int ler_bloco(char *buffer_saida, int setor, int *index, int size){
  unsigned char* ponteiro_byte;
  unsigned char buffer_temp;
  read_sector (setor, buffer_temp);
  buffer_saida[*index] =
  index++;
}

int read2 (FILE2 handle, char *buffer, int size) {
  Handle handle_inode = inodes_abertos[handle];
  int tamanho = (handle_inode.inode).bytesFileSize;

  int index = 0;
  ler_bloco(buffer, &index, size);
	return -1;
}
